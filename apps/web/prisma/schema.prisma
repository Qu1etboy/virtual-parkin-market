// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String    @map("user_id")
  providerType       String    @map("provider_type")
  providerId         String    @map("provider_id")
  providerAccountId  String    @map("provider_account_id")
  refreshToken       String?   @map("refresh_token")
  accessToken        String?   @map("access_token")
  accessTokenExpires DateTime? @map("access_token_expires")
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  expires      DateTime
  sessionToken String   @unique @map("session_token")
  accessToken  String   @unique @map("access_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  user         User     @relation(fields: [userId], references: [id])
}

enum Role {
  ADMIN
  USER
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String?          @unique
  emailVerified   DateTime?        @map("email_verified")
  password        String?
  image           String?
  role            Role             @default(USER)
  customerProfile CustomerProfile?
  stores          Store[]
  accounts        Account[]
  sessions        Session[]
  // User has many orders
  orders          Order[]
  // User write many reviews to products
  reviews         Review[]
  // User has many addresses used for shipping
  addresses       Address[]
  // User receive many bills from purchasing products
  bills           Bill[]
  // User receive many receipts from purchased products
  receipts        Receipt[]
  // Timestamp
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@unique([identifier, token])
}

enum Gender {
  MALE
  FEMALE
}

model CustomerProfile {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String    @unique @map("user_id")
  //
  phoneNumber String?   @map("phone_number")
  birthday    DateTime?
  gender      Gender?
  // Timestamp
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
}

model Address {
  id            String   @id @default(cuid())
  // Address belongs to user
  userId        String   @map("user_id")
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  //
  address       String
  //
  province      String
  provinceId    Int      @map("province_id")
  //
  district      String
  districtId    Int      @map("district_id")
  //
  subDistrict   String?  @map("sub_district")
  subDistrictId Int?     @map("sub_district_id")
  //
  postalCode    String   @map("postal_code")
  postalCodeId  Int      @map("postal_code_id")
  // Timestamp
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Can be change later
enum StoreStatus {
  PENDING
  APPROVED
  REJECTED
  DELETED
}

model Store {
  id               String      @id @default(cuid())
  name             String      @unique
  description      String      @db.LongText
  address          String
  // For identify store owner
  ownerIdCard      String      @map("owner_id_card")
  ownerIdCardPhoto String      @map("owner_id_card_photo")
  // For receive money
  bankAccount      String      @map("bank_account")
  bankName         String      @map("bank_name")
  bankProvider     String      @map("bank_provider")
  bookBankPhoto    String      @map("book_bank_photo")
  // Store status
  status           StoreStatus @default(PENDING)
  approvedAt       DateTime?   @map("approved_at")
  // For display
  profileImage     String?     @map("profile_image")
  bannerImage      String?     @map("banner_image")
  // Store has one owner
  user             User?       @relation(fields: [userId], references: [id])
  userId           String?
  // Store has many orders
  order            Order[]
  // Store has many products
  product          Product[]
  // Timestamp
  createdAt        DateTime    @default(now()) @map("created_at")
  updatedAt        DateTime    @updatedAt @map("updated_at")
}

enum ProductCategory {
  Electronics // อิเล็กทรอนิกส์
  Apparel // เสื้อผ้า
  Furniture // เฟอร์นิเจอร์
  Beauty // ความงาม
  Books // หนังสือ
  Sports // กีฬา
  Toys // ของเล่น
  Wellness // สุขภาพและความเป็นอยู่
  Groceries // ของชำร่วย
  Automotive // ยานยนต์
  Pets // สัตว์เลี้ยง
  Jewelry // เครื่องเพชรพลอย
  Art // ศิลปะ
  Tools // เครื่องมือ
  Baby // สินค้าเด็ก
}

model Product {
  id            String          @id @default(cuid())
  name          String          @unique
  description   String          @db.LongText
  // Slug is a unique string for identify product in url
  slug          String          @unique
  // Price can be the same as original price or different, this help when product has discount
  price         Float
  originalPrice Float           @map("original_price")
  stockQuantity Int             @map("stock_quantity")
  category      ProductCategory
  // Is product available to sell
  sell          Boolean         @default(false)
  images        ProductImage[]
  orderItem     OrderItem[]
  store         Store?          @relation(fields: [storeId], references: [id])
  storeId       String?
  review        Review[]
  // Timestamp
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  image     String
  // Timestamp
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum BillStatus {
  PENDING
  PAID
  CANCELLED
}

model Bill {
  id        String     @id @default(cuid())
  userId    String     @map("user_id")
  user      User       @relation(fields: [userId], references: [id])
  // Bill belongs to order
  order     Order[]
  //
  receipt   Receipt?   @relation(fields: [receiptId], references: [id])
  receiptId String?    @unique @map("receipt_id")
  // 
  status    BillStatus @default(PENDING)
  // Timestamp
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
}

model Receipt {
  id              String   @id @default(cuid())
  // Receipt belongs to bill
  bill            Bill?
  //
  amount          Float
  shippingAddress String   @map("shipping_address")
  contactNumber   String   @map("contact_number")
  contactEmail    String?  @map("contact_email")
  // Receipt belongs to user
  user            User?    @relation(fields: [userId], references: [id])
  userId          String?
  // Timestamp
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
}

model Order {
  id            String      @id @default(cuid())
  // Order belongs to user
  userId        String      @map("user_id")
  user          User        @relation(fields: [userId], references: [id])
  // Order belongs to store
  storeId       String      @map("store_id")
  store         Store       @relation(fields: [storeId], references: [id])
  // 
  shippingPrice Float       @map("shipping_price")
  status        OrderStatus @default(PENDING)
  // Order has many order item
  orderItem     OrderItem[]
  // Order has one bill
  billId        String
  bill          Bill        @relation(fields: [billId], references: [id])
  // Timestamp
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  @@unique([storeId, billId])
}

model OrderItem {
  id        String   @id @default(cuid())
  // OrderItem belongs to order
  orderId   String   @map("order_id")
  order     Order    @relation(fields: [orderId], references: [id])
  // OrderItem belongs to product
  productId String   @map("product_id")
  product   Product  @relation(fields: [productId], references: [id])
  // Current price, this help when product price change
  price     Float
  quantity  Int
  // Timestamp
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Review {
  id        String   @id @default(cuid())
  // Review belongs to user
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  // Review belongs to product
  productId String   @map("product_id")
  product   Product  @relation(fields: [productId], references: [id])
  // 
  rating    Float
  content   String?
  // Timestamp
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([userId, productId])
}
